// Generated by CoffeeScript 1.6.3
/*
	CALimitRanger
	Signature: Min[Number], Max[Number], type[String]
		returns Range class
			@get & @set: Number
			@inc: Anonymous
			@dec: Anonymous
	Description: Handles number counter in limits and cycles.
	This is not neccessary but I for one appreciate the sugar.
	Dependencies: None
	Exports: CALimitRanger[Function]
*/


(function() {
  var CALimitRanger, Limiter, Looper, Ranger, exports, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Ranger = (function() {
    function Ranger(min, max) {
      this.min = min;
      this.max = max;
      this.cur = this.min;
    }

    Ranger.prototype.get = function() {
      return this.cur;
    };

    Ranger.prototype.set = function(v) {
      if ((this.min <= v && v <= this.max)) {
        return this.cur = v;
      }
    };

    return Ranger;

  })();

  Looper = (function(_super) {
    __extends(Looper, _super);

    function Looper() {
      _ref = Looper.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Looper.prototype.inc = function() {
      if (this.cur++ > max) {
        return this.cur = this.min;
      }
    };

    Looper.prototype.dec = function() {
      if (this.cur-- < this.min) {
        return this.cur = this.max;
      }
    };

    return Looper;

  })(Ranger);

  Limiter = (function(_super) {
    __extends(Limiter, _super);

    function Limiter() {
      _ref1 = Limiter.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Limiter.prototype.inc = function() {
      if (this.cur++ > this.max) {
        return this.cur = this.max;
      }
    };

    Limiter.prototype.dec = function() {
      if (this.cur-- < this.min) {
        return this.cur = this.min;
      }
    };

    return Limiter;

  })(Ranger);

  CALimitRanger = function(min, max, type) {
    var pick;
    if (!type) {
      type = max;
      max = min;
      min = 0;
    }
    pick = (function() {
      switch (type) {
        case 'ranger':
          return Ranger;
        case 'loop':
          return Looper;
        case 'limit':
          return Limiter;
        case 'positive':
          return Positive;
        default:
          return null;
      }
    })();
    if (pick) {
      return pick(min, max);
    } else {
      throw new Error('Range Type "' + type + '" not found.');
    }
  };

  if (typeof exports !== 'undefined') {
    exports = CALimitRanger;
  } else {
    this.CALimitRanger = CALimitRanger;
  }

}).call(this);
