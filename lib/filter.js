// Generated by CoffeeScript 1.6.3
/*
	CAFilter
	Signature: CAFilter[Constructor]
*/


(function() {
  var CAFilter;

  CAFilter = (function() {
    function CAFilter(raw) {
      this.filter = "";
      if (raw) {
        this.toClass(raw);
      }
    }

    CAFilter.prototype.toClass = function(raw) {
      var type;
      type = typeof raw;
      if (type === 'string') {
        return this.fromString(raw);
      } else if (type === 'object') {
        return this.fromMongo(raw);
      } else {
        throw new Error("" + type + " is not a base data type. Only Strings, Urls, or Objects are allowed.");
      }
    };

    CAFilter.prototype.fromString = function(f) {
      var pair, pairs, prop, query, state, value, _i, _len;
      if (f.charAt(0) === '/') {
        state = {
          $or: []
        };
        query = f.slice(3);
        pairs = query.split('&');
        for (_i = 0, _len = pairs.length; _i < _len; _i++) {
          pair = pairs[_i];
          prop = pair[0], value = pair[1];
          state.$or.push({
            prop: value
          });
        }
        return this.fromMongo(state);
      } else {
        return this.filter = f;
      }
    };

    CAFilter.prototype.fromMongo = function(object) {
      var pair, prop, statements, value, _i, _len, _ref;
      if (object == null) {
        object = {};
      }
      statements = [];
      _ref = object.$or;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        prop = pair[0], value = pair[1];
        statements.push(prop + "=" + value);
      }
      return this.filter = statements.join("||") || object;
    };

    CAFilter.prototype.toString = function() {
      return this.filter;
    };

    CAFilter.prototype.toUrl = function() {
      return "/f?" + this.filter.split("||").join("&");
    };

    CAFilter.prototype.toMongo = function() {
      var i, num, object, prop, statement, statements, value, _i, _len, _ref;
      object = {
        $or: []
      };
      statements = this.filter.split("||");
      for (_i = 0, _len = statements.length; _i < _len; _i++) {
        statement = statements[_i];
        _ref = statement.split("="), prop = _ref[0], value = _ref[1];
        if (value === "true") {
          value = true;
        }
        if (value === "false") {
          value = false;
        }
        num = parseInt(value, 10);
        if (typeof num === 'number') {
          value = num;
        }
        i = {};
        object.$or.push((i[prop] = value));
      }
      return object;
    };

    CAFilter.prototype.toFunction = function() {
      var o;
      o = this.toMongo();
      return function(x) {
        var bool, prop, statement, value, _i, _len, _ref;
        bool = false;
        _ref = o.$or;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          statement = _ref[_i];
          prop = statement[0], value = statement[1];
          if (x[prop] === value) {
            bool = true;
          }
        }
        return bool;
      };
    };

    CAFilter.prototype.toConditions = function() {
      return this.filter.split('||');
    };

    return CAFilter;

  })();

}).call(this);
