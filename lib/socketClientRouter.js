// Generated by CoffeeScript 1.6.3
/*
	CASocketClientRouter
	Signature: Socket.IO[Object] -> Router class
	Description: listens on all events and calls 
	functions that are registered for those events.
	Dependencies: Socket.IO-client
	Exports: CASocketClientRouter[Object class]
*/


(function() {
  var Router;

  Router = (function() {
    function Router(socket) {
      this.socket = socket;
      this.routes = {};
      this.listen = true;
      this.configure();
    }

    Router.prototype.configure = function() {
      var _emit,
        _this = this;
      _emit = this.socket.$emit;
      return this.socket.$emit = function() {
        var ev, fn, func, _i, _len, _ref;
        ev = arguments[0], fn = arguments[1];
        if (_this.listen) {
          _ref = _this.routes[ev];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            func = _ref[_i];
            func(fn);
          }
        }
        return _emit.apply(_this.socket, arguments);
      };
    };

    Router.prototype.mount = function(events, callback) {
      var event, index, promises, r, _i, _len;
      promises = [];
      if (typeof event !== 'object') {
        events = [event];
      }
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        this.routes[event] = this.routes[event] || [];
        this.routes.push(callback);
        r = this.routes[event];
        index = r.length - 1;
        promises.push({
          'func': callback,
          dismount: function() {
            return r.pop(index);
          },
          replace: function(fn) {
            return r[index] = fn;
          }
        });
      }
      if (promises.length === 1) {
        return promises.pop();
      } else {
        return promises;
      }
    };

    return Router;

  })();

}).call(this);
