// Generated by CoffeeScript 1.6.3
/*
	CAHandlebarStore
	Signature: (Object of HandlebarStore classes)
	Description: Fetches and renders handlebars templates in a
	variety of ways using jQuery or Socket.io.
	Dependencies: Handlebars, (jQuery or Socket.io)
	Exports: CAHandlebarStore[Object]
*/


(function() {
  var CAHandlebarStore, HandlebarStore, SocketioStore, exports, jQueryAJAXStore, jQueryHTMLStore, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HandlebarStore = (function() {
    function HandlebarStore(directory, store) {
      this.directory = directory != null ? directory : '/';
      this.store = store != null ? store : {};
    }

    HandlebarStore.prototype.get = function(name) {
      return this.store[name];
    };

    HandlebarStore.prototype.set = function(name, template) {
      return this.store[name] = Handlebars.compile(template);
    };

    HandlebarStore.prototype.getJSONObject = function() {
      return this.store;
    };

    HandlebarStore.prototype.setJSONObject = function(json) {
      var name, template, _i, _len, _results;
      _results = [];
      for (template = _i = 0, _len = json.length; _i < _len; template = ++_i) {
        name = json[template];
        _results.push(this.set(name, template));
      }
      return _results;
    };

    return HandlebarStore;

  })();

  jQueryAJAXStore = (function(_super) {
    __extends(jQueryAJAXStore, _super);

    function jQueryAJAXStore() {
      _ref = jQueryAJAXStore.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    jQueryAJAXStore.prototype.vet = function(name) {
      var _this = this;
      if (this.store[name]) {
        return this.store[name];
      }
      return $.get(this.directory + name + '.hbs', function(template) {
        return _this.set(name, template);
      });
    };

    jQueryAJAXStore.prototype.vetJSONObject = function(path) {
      return $.getJSON(this.directory + path, this.setJSONObject);
    };

    return jQueryAJAXStore;

  })(HandlebarStore);

  jQueryHTMLStore = (function(_super) {
    __extends(jQueryHTMLStore, _super);

    function jQueryHTMLStore() {
      _ref1 = jQueryHTMLStore.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    jQueryHTMLStore.prototype.vet = function(name) {
      if (this.store[name]) {
        return this.store[name];
      }
      return this.set(name, $('#' + name + '-template').html());
    };

    jQueryHTMLStore.prototype.vetJSONObject = function(name) {
      return this.setJSONObject(JSON.parse($('#' + name).html()));
    };

    return jQueryHTMLStore;

  })(HandlebarStore);

  SocketioStore = (function(_super) {
    __extends(SocketioStore, _super);

    function SocketioStore() {
      _ref2 = SocketioStore.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SocketioStore.prototype.vet = function(name) {
      var _this = this;
      if (this.store[name]) {
        return this.store[name];
      }
      return directory.emit('template', {
        name: name
      }, function(data) {
        return _this.set(name, data.template || data);
      });
    };

    SocketioStore.prototype.vetJSONObject = function() {
      var _this = this;
      return directory.emit('template', {
        name: 'all'
      }, function(data) {
        return _this.setJSONObject(data.templates || data.json || data);
      });
    };

    return SocketioStore;

  })(HandlebarStore);

  CAHandlebarStore = {
    HandlebarStore: HandlebarStore,
    jQueryHTMLStore: jQueryHTMLStore,
    jQueryAJAXStore: jQueryAJAXStore,
    SocketioStore: SocketioStore
  };

  if (typeof exports !== 'undefined') {
    exports = CAHandlebarStore;
  } else {
    this.CAHandlebarStore = CAHandlebarStore;
  }

}).call(this);
