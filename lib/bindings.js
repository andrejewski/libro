// Generated by CoffeeScript 1.6.3
/*
	CAMultiBind
	Signature: (Scopes) -> (Function) -> Empty to Execute
	Description: A simple binding function that binds a function 
	to multiple scopes to be executed at once.
	Dependencies: None
	Exports: CAMultiBind[Function]
*/


(function() {
  var CABindChain, CABindGroup, CABindings, CAMultiBind, exports;

  CAMultiBind = function(p1) {
    return function(p2) {
      var func, scope;
      scope = func = null;
      if (typeof p1 === 'function') {
        scope = p2;
        func = p1;
      } else {
        scope = p1;
        func = p2;
      }
      return function() {
        var i, n, _results;
        _results = [];
        for (i in scope) {
          n = scope[i];
          _results.push(func.call(n));
        }
        return _results;
      };
    };
  };

  /*
  	CABindGroup
  	Signature: (Function) -> ... -> Empty to Execute
  	Description: Groups a lot of function call together in
  	a nice passable variable, which are called in the order 
  	they are included.
  	Dependencies: None
  	Exports: CABindGroup[Function]
  */


  CABindGroup = function(func) {
    var funcs, pass;
    funcs = [];
    pass = function(func) {
      var i, n, _results;
      if (typeof func === 'function') {
        funcs.push(func);
        return pass;
      } else {
        _results = [];
        for (i in funcs) {
          n = funcs[i];
          _results.push(n());
        }
        return _results;
      }
    };
    return pass(func);
  };

  /*
  	CABindChain
  	Signature: (Function) -> ... -> Empty to Execute
  	Description: CABindGroup that executes sequencial and 
  	if any function callback anything but empty execution
  	stops and returns the result to the last function.
  	Dependencies: None
  	Exports: CABindChain[Function]
  */


  CABindChain = function(func) {
    var funcs, pass;
    funcs = [];
    pass = function(func) {
      var next;
      if (typeof func === 'function') {
        funcs.push(func);
        return pass;
      } else {
        next = function(i) {
          return function(err) {
            if (err) {
              return funcs[funcs.length - 1](err);
            } else {
              return funcs[i](next(i + 1));
            }
          };
        };
        return funcs[0](next(1));
      }
    };
    return pass(func);
  };

  CABindings = {
    CAMultiBind: CAMultiBind,
    CABindGroup: CABindGroup,
    CABindChain: CABindChain
  };

  if (typeof exports !== 'undefined') {
    exports = CABindings;
  } else {
    this.CABindings = CABindings;
  }

}).call(this);
