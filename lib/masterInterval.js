// Generated by CoffeeScript 1.6.3
/*
	CAMasterInterval
	Signature:
		Number[Time in Milliseconds]
		returns class CAMasterInterval:
			@and: 	Function(, Scope[Object])
			@start: Anonomous
			@stop: 	Anonomous
	Description: keeps a global timer that can be easily shared 
	between functions that need to be executed separately, yet
	also at the same time. No need for multiple timers.
	Dependencies: None
	Exports: CAMasterInterval[Function]
*/


(function() {
  var CAMasterInterval, bind, exports;

  bind = function(func, scope) {
    return function() {
      return func.call(scope);
    };
  };

  CAMasterInterval = function(time) {
    var masterInterval;
    masterInterval = {
      functions: [],
      interval: null,
      start: function() {
        var func,
          _this = this;
        this.stop();
        func = function() {
          var _i, _len, _ref, _results;
          _ref = _this.functions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            func = _ref[_i];
            _results.push(func());
          }
          return _results;
        };
        this.interval = setInterval(func, time);
        return this;
      },
      stop: function() {
        if (this.interval) {
          clearInterval(this.interval);
        }
        return this;
      },
      add: function(func, scope) {
        if (scope) {
          func = bind(func, scope);
        }
        this.functions.push(func);
        return this;
      }
    };
    return masterInterval.start();
  };

  if (typeof exports !== 'undefined') {
    exports = CAMasterInterval;
  } else {
    this.CAMasterInterval = CAMasterInterval;
  }

}).call(this);
