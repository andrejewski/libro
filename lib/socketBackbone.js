// Generated by CoffeeScript 1.6.3
/*
	CABackboneSocket
	Description: Make Backbone models happily work with Socket.io
	Dependencies: Backbone, Socket.IO
	Exports: CABackboneSocket, Backbone.Socket
*/


(function() {
  var CABackboneSocket, exports, root;

  root = window || this;

  CABackboneSocket = Backbone.Socket = Backbone.Model.extend({
    socket: null,
    socketDebug: false,
    socketEvents: {},
    socketMounts: {},
    ioEnable: function() {
      var domain;
      if (!this.socket) {
        this.io = this.io || root.io || root.socketIO;
        domain = this.socketUrl || (this.socketDomain + (this.urlRoot || '/'));
        this.socket = this.io.connect(domain);
      }
      this.ioListenAll();
      return this;
    },
    ioListen: function(event, callback) {
      var _this = this;
      if (this.socketDebug) {
        console.log("io#mount:" + event, callback);
      }
      this.socketEvents[event] = callback;
      this.socket.removeListener(event, this.socketMounts[event]);
      if (typeof callback === 'string') {
        callback = this[callback];
      }
      this.socketMounts[event] = function(data, next) {
        if (_this.socketDebug) {
          console.log('io#listen:#{ event }', data);
        }
        return callback.call(_this, data, next);
      };
      return this.socket.on(event, this.socketMounts[event]);
    },
    ioListenAll: function() {
      var callback, event, _i, _len, _ref, _results;
      _ref = this.socketEvents;
      _results = [];
      for (callback = _i = 0, _len = _ref.length; _i < _len; callback = ++_i) {
        event = _ref[callback];
        _results.push(this.ioListen(event, callback));
      }
      return _results;
    },
    ioTrigger: function(event, data, next) {
      if (data == null) {
        data = {};
      }
      if (next == null) {
        next = function() {};
      }
      if (this.socketDebug) {
        console.log('io#trigger:#{ event }', data);
      }
      return this.socket.emit(event, data, next);
    }
  });

  if (typeof exports !== 'undefined') {
    exports = CABackboneSocket;
  } else {
    this.CABackboneSocket = CABackboneSocket;
  }

}).call(this);
